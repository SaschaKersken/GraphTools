from graph import Graph
from graph_tools import *

graph1 = Graph()
graph1.add_vertex('A', 'B', 'C', 'D', 'E')
graph1.add_edge('A', 'B')
graph1.add_edge('B', 'C')
graph1.add_edge('C', 'D')
graph1.add_edge('D', 'E')
graph1.add_edge('E', 'F')
graph1.add_edge('F', 'A')
print(graph1)
print(f"Durchwanderung: {traverse(graph1, 'A')}")
print(f"Zusammenhängend? {is_connected(graph1)}")
print(f"Baum? {is_tree(graph1)}")
print(f"Eulerpfad möglich? {has_eulerian_path(graph1)}")
print(f"Eulerkreis möglich? {has_eulerian_cycle(graph1)}")
print(f"Euelerkreis: {eulerian_cycle(graph1)}")
graph1.visualize()
graph2 = Graph()
graph2.add_vertex('A', 'B', 'C', 'D', 'E')
graph2.add_edge('A', 'B')
graph2.add_edge('A', 'C')
graph2.add_edge('A', 'D')
graph2.add_edge('A', 'E')
graph2.add_edge('B', 'C')
graph2.add_edge('B', 'D')
graph2.add_edge('B', 'E')
graph2.add_edge('C', 'D')
graph2.add_edge('C', 'E')
graph2.add_edge('D', 'E')
print(graph2)
print(f"Durchwanderung: {traverse(graph2, 'A')}")
print(f"Eulerpfad möglich? {has_eulerian_path(graph2)}")
print(f"Eulerkreis möglich? {has_eulerian_cycle(graph2)}")
print(f"Eulerkreis: {eulerian_cycle(graph2)}")
graph2.visualize()
graph3 = Graph()
graph3.add_vertex('A', 'B', 'C', 'D', 'C', 'E')
graph3.add_edge('A', 'B')
graph3.add_edge('A', 'C')
graph3.add_edge('A', 'D')
graph3.add_edge('B', 'C')
graph3.add_edge('B', 'D')
graph3.add_edge('C', 'D')
graph3.add_edge('C', 'E')
graph3.add_edge('D', 'E')
print(graph3)
print(f"Durchwanderung: {traverse(graph3, 'A')}")
print(f"Eulerpfad möglich? {has_eulerian_path(graph3)}")
print(f"Eulerkreis möglich? {has_eulerian_cycle(graph3)}")
# "Haus vom Nikolaus" in traditioneller Anordnung
pos = {'A': (-1, -1), 'B': (1, -1), 'C': (1, 0), 'D': (-1, 0), 'E': (0, 1)}
graph3.visualize(pos)
graph4 = Graph()
graph4.add_vertex('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J')
graph4.add_edges([('A', 'B'), ('B', 'C'), ('C', 'A')])
graph4.add_edges([('A', 'D'), ('D', 'E'), ('E', 'F'), ('F', 'A')])
graph4.add_edges([('A', 'G'), ('G', 'H'), ('H', 'I'), ('I', 'J'), ('J', 'A')])
print(graph4)
if (has_eulerian_cycle(graph4)):
    print(f"Eulerkreis: {eulerian_cycle(graph4)}")
else:
    print("Kein Eulerkreis")
graph4.visualize()
graph5 = Graph()
graph5.add_vertex('A', 'B', 'C', 'D', 'E', 'F', 'G')
graph5.add_edges([('A', 'B'), ('A', 'C')])
graph5.add_edges([('B', 'D'), ('B', 'E')])
graph5.add_edges([('C', 'F'), ('C', 'G'), ('F', 'G')])
print(graph5)
print(f"Kreis ab A? {circle(graph5, 'A')}")
print(f"Kreis ab C? {circle(graph5, 'C')}")
print(f"Baum? {is_tree(graph5)}")
graph5.visualize()
print("Entferne Kante F-G")
graph5.remove_edge(('F', 'G'))
print(graph5)
print(f"Kreis ab C? {circle(graph5, 'C')}")
print(f"Baum? {is_tree(graph5)}")
graph5.visualize()
graph6 = graph5.subgraph(['A', 'B', 'C', 'D'])
graph6.visualize()
